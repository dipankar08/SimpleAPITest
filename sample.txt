# API  Error case
GET  => http://{server}/api/test0/test => 404 - We have not yet support this api
POST  => http://{server}/api/test0/create/ => abc => Error while parsing request body

#Backword compatbilitues 
GET  => http://{server}/api/test0/ => Find successfully with
GET  => http://{server}/api/test0/?_cmd=create&name=dip => insert successfully
GET  => http://{server}/api/test0/?_cmd=create1&name=dip => You send an invalid comamnd:create1
POST  => http://{server}/api/test0/ => {} => Find successfully with
POST  => http://{server}/api/test0/ => {"_cmd":"create","name":"dip"} => insert successfully
POST  => http://{server}/api/test0/ => {"_cmd":"create1","name":"dip"} => You send an invalid comamnd:create1

# Test Validation 
#POST  => http://{server}/api/test0/ => Hello => insert successfully
#POST  => http://{server}/api/test0/ => {"_payload":{"test":"test"}} => You send an invalid comamnd:create1


# ReSet DB
!GET => http://{server}/api/test0/delete?_confirmstr=test0 => Successfuly Deleted

# Test: insert one or many
GET => http://{server}/api/test0/create  =>Trying insert Empty Object
GET => http://{server}/api/test0/create?name=dip1&roll=10 => "insert_time":"2019
POST => http://{server}/api/test0/create => {"name":"dip2","roll":10} => 1 entry\(s\) insert successfully.
POST => http://{server}/api/test0/create => {"_payload":[{"name":"dip3","roll":10},{"name":"dip3","roll":10}]} => 2 entry\(s\) insert successfully.

## Test: find element
!POST => http://{server}/api/test0/create => {"name":"dip","count":1} => "_id":"(?<id>.*)"
GET => http://{server}/api/test0/find?id={id}  => Find successfully with 1 items
GET => http://{server}/api/test0/find  => Find successfully
GET => http://{server}/api/test0/find?name=dip3  => Find successfully 
GET => http://{server}/api/test0/find?name=dip1&roll=10 => Find successfully 
GET => http://{server}/api/test0/find?_filter=name:dip1,roll:10 => Find successfully 
GET => http://{server}/api/test0/find?name=dip3&roll=10 => Find successfully with 0 items
# you should you POST to make type senasitive serach.
POST => http://{server}/api/test0/find => {"name":"dip3","roll":10} => successfully 

## Test Update.
# 1. Test We able update an spacific entry
# 2. Test we update multiple entry by filter.
# 3. Test we update multiple entry with multiple spacific data ( using _payload.)
!POST => http://{server}/api/test0/create => {"name":"subha","roll":1} => success
!POST => http://{server}/api/test0/create => {"name":"subha","roll":2} => success
!POST => http://{server}/api/test0/create => {"name":"hari","roll":3} => success
GET => http://{server}/api/test0/update?id={id}&name=hari1 => "name":"hari1"
GET => http://{server}/api/test0/update?id={id}&name=hari2 => "name":"hari2"
GET => http://{server}/api/test0/update?roll=10&_filter=name:subha => Please send _confirmstr with arguments
GET => http://{server}/api/test0/update?_filter=name:subha&_confirmstr=test0 => Looks like you are sending empty data
GET => http://{server}/api/test0/update?roll=10&_filter=name:subha&_confirmstr=test0 => Successfully updated 2 entry out of 2 matched cout
POST => http://{server}/api/test0/update => {"roll":10,"_filter":{"name":"subha"},"_confirmstr":"test0"} => Successfully updated 2 entry out of 2 matched cout
POST => http://{server}/api/test0/update => {"_payload":[{"name":"dip"}], "_confirmstr":"test0"} => ensurePlayloadObjectHasId:each object in _payload must have a id
POST => http://{server}/api/test0/update => {"_payload":[{"id":{id}, "name":"dip"}], "_confirmstr":"test0"} => ?



# Rankup, RankDown and Hits API.
!POST => http://{server}/api/test0/create => {"name":"dip","count":1} => success
GET => http://{server}/api/test0/find?id={id}  => Find successfully with 1 items
GET => http://{server}/api/test0/hits => field is missing
GET => http://{server}/api/test0/hits?field=count => id is missing
GET => http://{server}/api/test0/hits?field=count&id={id} => "count":1
GET => http://{server}/api/test0/hits?field=count&id={id} => "count":2
# Adjust the bewlo test as they are right.
GET => http://{server}/api/test0/hits?field=count&id={id}&value=8 => "count":3
GET => http://{server}/api/test0/hits?field=count&id={id}&value=-1 => "count":11

#GET => http://{server}/api/test0/create?name=dip&count=1 
#GET => http://{server}/api/test0/rankup =>
#GET => http://{server}/api/test0/rankup?field=count =>
#GET => http://{server}/api/test0/rankup?field=count&value=2 =>
#GET => http://{server}/api/test0/rankup?field=count&value=2 =>
#GET => http://{server}/api/test0/rankup?field=count&value=2 =>
#GET => http://{server}/api/test0/rankup?field=count&value=2 =>
#GET => http://{server}/api/test0/rankup?field=count&value=2 =>
#GET => http://{server}/api/test0/rankdown?field=count&value=2 =>
#GET => http://{server}/api/test0/rankdown?field=count&value=2 =>
#GET => http://{server}/api/test0/rankdown?field=count&value=2 =>
#GET => http://{server}/api/test0/rankdown?field=count =>
#GET => http://{server}/api/test0/rankdown?field=count&value=2 =>
#GET => http://{server}/api/test0/rankdown?field=count&value=2 =>

# Test count function.
GET => http://{server}/api/test0/delete?_confirmstr=test0 => Successfuly Deleted
POST => http://{server}/api/test0/create?_confirmstr=test0 => {"_payload":[{"name":"dip","roll":1}, {"name":"dip","roll":2}, {"name":"sup","roll":3}]} => success
GET => http://{server}/api/test0/count => 3
GET => http://{server}/api/test0/count?name=dip => 2
GET => http://{server}/api/test0/count?roll=3 => 0
POST => http://{server}/api/test0/count => {"roll":3} => 1

# Test Regular Exptession
!GET => http://{server}/api/test0/delete?_confirmstr=test0 => Successfuly Deleted
!POST => http://{server}/api/test0/create?_confirmstr=test0 => {"_payload":[{"name":"dip1","roll":1}, {"name":"dip2","roll":2}, {"name":"xip2","roll":3}]} => success
GET => http://{server}/api/test0/regex?name=^d => ?

# delete, one, many
GET => http://{server}/api/test0/delete => Please send _confirmstr with arguments
GET => http://{server}/api/test0/delete?_confirmstr=test0 => Successfuly Deleted